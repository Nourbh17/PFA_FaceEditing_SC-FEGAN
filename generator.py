# -*- coding: utf-8 -*-
"""Generator.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BI4aRTxV9HIKKQUtW_EHpiumI2Ql434v
"""

import tensorflow as tf
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Activation, Input, Conv2D, LeakyReLU, Multiply, Conv2DTranspose, Concatenate


def Gated_Convolutional(input_tensor,  filters, num_block, strides, dilation_rate,training=True, lrn=True, activation=True):

    x_feature = Conv2D(filters=filters, kernel_size=3, padding="same", strides=strides,
                                dilation_rate=dilation_rate, name="conv_" + str(num_block))(input_tensor)

    x_gating = Conv2D(filters=filters, kernel_size=3, padding="same", strides=strides,
                               dilation_rate=dilation_rate, name="gated_conv_" + str(num_block))(input_tensor)

    sigmoid = Activation("sigmoid", name="sigmoid_conv_" + str(num_block))

    multiply = Multiply(name="multiplication_layer_conv_" + str(num_block))

    if lrn:
        x_feature = tf.nn.local_response_normalization(x_feature, bias=0.00005,
                                                         name="LRN_" + str(num_block))
    if activation:
        x_feature = LeakyReLU(alpha=0.1)(x_feature)

    x_gating = sigmoid(x_gating)

    output = multiply([x_gating, x_feature])

    return output

import tensorflow as tf
from tensorflow.keras.layers import Conv2DTranspose, LeakyReLU, Activation, Multiply


def Gated_Deconvolutional(input_tensor, filters, num_block, strides, dilation_rate, lrn=True):
    x_feature = Conv2DTranspose(filters=filters, kernel_size=3, padding="same", strides=strides,dilation_rate=dilation_rate, use_bias=True, name="deconv_" + str(num_block))(input_tensor)
    if lrn:
      x_feature = tf.nn.local_response_normalization(x_feature, bias=0.00005,name="LRN_" + str(num_block))
    x_feature = LeakyReLU(alpha=0.1)(x_feature)
    x_gating=Conv2DTranspose(filters=filters, kernel_size=3, padding="same", strides=2,dilation_rate=dilation_rate, name="gated_deconv_" + str(num_block))(input_tensor)
    x_gating=Activation("sigmoid", name="sigmoid_decon_" + str(num_block))(x_gating)
    output=Multiply(name="multiplication_layer_deconv_" + str(num_block))([x_gating,x_feature])
    return output

import tensorflow as tf
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Activation, Input, Conv2D, LeakyReLU, Multiply, Conv2DTranspose, Concatenate



class Generator(Model):

    def __init__(self, ):
        super(Generator, self).__init__()

    #encoder
    def Encoder(self,inputs, training=True, **kwargs ):
        skip_1 = inputs
        x = Gated_Convolutional(inputs,filters=64 * 1, lrn=False, dilation_rate=1, strides=2, num_block=1)
        skip_2 = x
        x = Gated_Convolutional(x,filters=64 * 2, lrn=True, dilation_rate=1, strides=2, num_block=2)
        skip_3 = x
        x = Gated_Convolutional(x,filters=64 * 4, lrn=True, dilation_rate=1, strides=2, num_block=3)
        skip_4 = x
        x = Gated_Convolutional(x,filters=64 * 8, lrn=True, dilation_rate=1, strides=2, num_block=4)
        skip_5 = x
        x = Gated_Convolutional(x,filters=64 * 8, lrn=True, dilation_rate=1, strides=2, num_block=5)
        skip_6 = x
        x = Gated_Convolutional(x,filters=64 * 8, lrn=True, dilation_rate=1, strides=2, num_block=6)
        skip_7 = x
        x = Gated_Convolutional(x,filters=64 * 8, lrn=True, dilation_rate=1, strides=2, num_block=7)

        # dilated Gated convolutional layers

        x = Gated_Convolutional(x,filters=64 * 8, lrn=True, dilation_rate=2, strides=1, num_block=8)
        x = Gated_Convolutional(x,filters=64 * 8, lrn=True, dilation_rate=2, strides=1, num_block=9)
        x = Gated_Convolutional(x,filters=64 * 8, lrn=True, dilation_rate=2, strides=1, num_block=10)
        x  = Gated_Convolutional(x,filters=64 * 8, lrn=True, dilation_rate=2, strides=1, num_block=11)

        return x, skip_1, skip_2, skip_3, skip_4, skip_5, skip_6, skip_7




    #decoder

    def Decoder(self,inputs, training=True,  **kwargs):
        concat = Concatenate(axis=-1)
        x = Gated_Deconvolutional(inputs[0],filters=64 * 8, lrn=True, dilation_rate=1, strides=2, num_block=1)
        x = concat([x,inputs[7]])
        x = Gated_Convolutional(x,filters=64 * 8, lrn=True, dilation_rate=1, strides=1, num_block=12)

        x = Gated_Deconvolutional(x,filters=64 * 8, lrn=True, dilation_rate=1, strides=2, num_block=2)
        x = concat([x, inputs[6]])
        x = Gated_Convolutional(x,filters=64 * 8, lrn=True, dilation_rate=1, strides=1, num_block=13)

        x = Gated_Deconvolutional(x,filters=64 * 8, lrn=True, dilation_rate=1, strides=2, num_block=3)
        x = concat([x, inputs[5]])
        x = Gated_Convolutional(x,filters=64 * 8, lrn=True, dilation_rate=1, strides=1, num_block=14)

        x = Gated_Deconvolutional(x,filters=64 * 4, lrn=True, dilation_rate=1, strides=2, num_block=4)
        x = concat([x, inputs[4]])
        x = Gated_Convolutional(x,filters=64 * 4, lrn=True, dilation_rate=1, strides=1, num_block=15)

        x = Gated_Deconvolutional(x,filters=64 * 2, lrn=True, dilation_rate=1, strides=2, num_block=5)
        x = concat([x, inputs[3]])
        x = Gated_Convolutional(x,filters=64 * 2, lrn=True, dilation_rate=1, strides=1, num_block=16)

        x = Gated_Deconvolutional(x,filters=64 * 1, lrn=True, dilation_rate=1, strides=2, num_block=6)
        x = concat([x, inputs[2]])
        x = Gated_Convolutional(x,filters=64 * 1, lrn=True, dilation_rate=1, strides=1, num_block=17)

        x = Gated_Deconvolutional(x,filters=3, lrn=True, dilation_rate=1, strides=2, num_block=7)
        x = concat([x, inputs[1]])
        x = Gated_Convolutional(x,filters=3, lrn=True, dilation_rate=1, strides=1, num_block=18,activation=False)
        output=Activation("tanh")(x)
        return output


    def call(self, inputs ,training=True,**kwargs):
        x = self.Encoder(inputs)
        output = self.Decoder(x)
        model = Model(inputs=inputs, outputs=output)
        return model